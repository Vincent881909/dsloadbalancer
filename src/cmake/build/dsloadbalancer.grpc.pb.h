// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dsloadbalancer.proto
#ifndef GRPC_dsloadbalancer_2eproto__INCLUDED
#define GRPC_dsloadbalancer_2eproto__INCLUDED

#include "dsloadbalancer.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace dsloadbalancer {

class SystemService final {
 public:
  static constexpr char const* service_full_name() {
    return "dsloadbalancer.SystemService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Stores a series of key-value pairs
    std::unique_ptr< ::grpc::ClientWriterInterface< ::dsloadbalancer::KVPair>> Put(::grpc::ClientContext* context, ::dsloadbalancer::BulkPutResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::dsloadbalancer::KVPair>>(PutRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::dsloadbalancer::KVPair>> AsyncPut(::grpc::ClientContext* context, ::dsloadbalancer::BulkPutResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::dsloadbalancer::KVPair>>(AsyncPutRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::dsloadbalancer::KVPair>> PrepareAsyncPut(::grpc::ClientContext* context, ::dsloadbalancer::BulkPutResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::dsloadbalancer::KVPair>>(PrepareAsyncPutRaw(context, response, cq));
    }
    // Retrieves the values for a given list of keys
    std::unique_ptr< ::grpc::ClientReaderInterface< ::dsloadbalancer::KVPair>> Get(::grpc::ClientContext* context, const ::dsloadbalancer::BulkGetRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::dsloadbalancer::KVPair>>(GetRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::dsloadbalancer::KVPair>> AsyncGet(::grpc::ClientContext* context, const ::dsloadbalancer::BulkGetRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::dsloadbalancer::KVPair>>(AsyncGetRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::dsloadbalancer::KVPair>> PrepareAsyncGet(::grpc::ClientContext* context, const ::dsloadbalancer::BulkGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::dsloadbalancer::KVPair>>(PrepareAsyncGetRaw(context, request, cq));
    }
    // Sends a Ping to Nodes to see which Nodes are running
    virtual ::grpc::Status SendPing(::grpc::ClientContext* context, const ::dsloadbalancer::PingMessage& request, ::dsloadbalancer::PingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsloadbalancer::PingResponse>> AsyncSendPing(::grpc::ClientContext* context, const ::dsloadbalancer::PingMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsloadbalancer::PingResponse>>(AsyncSendPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsloadbalancer::PingResponse>> PrepareAsyncSendPing(::grpc::ClientContext* context, const ::dsloadbalancer::PingMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dsloadbalancer::PingResponse>>(PrepareAsyncSendPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::dsloadbalancer::TaskInfo>> handleTask(::grpc::ClientContext* context, ::dsloadbalancer::Result* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::dsloadbalancer::TaskInfo>>(handleTaskRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::dsloadbalancer::TaskInfo>> AsynchandleTask(::grpc::ClientContext* context, ::dsloadbalancer::Result* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::dsloadbalancer::TaskInfo>>(AsynchandleTaskRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::dsloadbalancer::TaskInfo>> PrepareAsynchandleTask(::grpc::ClientContext* context, ::dsloadbalancer::Result* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::dsloadbalancer::TaskInfo>>(PrepareAsynchandleTaskRaw(context, response, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Stores a series of key-value pairs
      virtual void Put(::grpc::ClientContext* context, ::dsloadbalancer::BulkPutResponse* response, ::grpc::ClientWriteReactor< ::dsloadbalancer::KVPair>* reactor) = 0;
      // Retrieves the values for a given list of keys
      virtual void Get(::grpc::ClientContext* context, const ::dsloadbalancer::BulkGetRequest* request, ::grpc::ClientReadReactor< ::dsloadbalancer::KVPair>* reactor) = 0;
      // Sends a Ping to Nodes to see which Nodes are running
      virtual void SendPing(::grpc::ClientContext* context, const ::dsloadbalancer::PingMessage* request, ::dsloadbalancer::PingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendPing(::grpc::ClientContext* context, const ::dsloadbalancer::PingMessage* request, ::dsloadbalancer::PingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void handleTask(::grpc::ClientContext* context, ::dsloadbalancer::Result* response, ::grpc::ClientWriteReactor< ::dsloadbalancer::TaskInfo>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientWriterInterface< ::dsloadbalancer::KVPair>* PutRaw(::grpc::ClientContext* context, ::dsloadbalancer::BulkPutResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::dsloadbalancer::KVPair>* AsyncPutRaw(::grpc::ClientContext* context, ::dsloadbalancer::BulkPutResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::dsloadbalancer::KVPair>* PrepareAsyncPutRaw(::grpc::ClientContext* context, ::dsloadbalancer::BulkPutResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::dsloadbalancer::KVPair>* GetRaw(::grpc::ClientContext* context, const ::dsloadbalancer::BulkGetRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::dsloadbalancer::KVPair>* AsyncGetRaw(::grpc::ClientContext* context, const ::dsloadbalancer::BulkGetRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::dsloadbalancer::KVPair>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::dsloadbalancer::BulkGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsloadbalancer::PingResponse>* AsyncSendPingRaw(::grpc::ClientContext* context, const ::dsloadbalancer::PingMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dsloadbalancer::PingResponse>* PrepareAsyncSendPingRaw(::grpc::ClientContext* context, const ::dsloadbalancer::PingMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::dsloadbalancer::TaskInfo>* handleTaskRaw(::grpc::ClientContext* context, ::dsloadbalancer::Result* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::dsloadbalancer::TaskInfo>* AsynchandleTaskRaw(::grpc::ClientContext* context, ::dsloadbalancer::Result* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::dsloadbalancer::TaskInfo>* PrepareAsynchandleTaskRaw(::grpc::ClientContext* context, ::dsloadbalancer::Result* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientWriter< ::dsloadbalancer::KVPair>> Put(::grpc::ClientContext* context, ::dsloadbalancer::BulkPutResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::dsloadbalancer::KVPair>>(PutRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::dsloadbalancer::KVPair>> AsyncPut(::grpc::ClientContext* context, ::dsloadbalancer::BulkPutResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::dsloadbalancer::KVPair>>(AsyncPutRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::dsloadbalancer::KVPair>> PrepareAsyncPut(::grpc::ClientContext* context, ::dsloadbalancer::BulkPutResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::dsloadbalancer::KVPair>>(PrepareAsyncPutRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::dsloadbalancer::KVPair>> Get(::grpc::ClientContext* context, const ::dsloadbalancer::BulkGetRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::dsloadbalancer::KVPair>>(GetRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::dsloadbalancer::KVPair>> AsyncGet(::grpc::ClientContext* context, const ::dsloadbalancer::BulkGetRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::dsloadbalancer::KVPair>>(AsyncGetRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::dsloadbalancer::KVPair>> PrepareAsyncGet(::grpc::ClientContext* context, const ::dsloadbalancer::BulkGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::dsloadbalancer::KVPair>>(PrepareAsyncGetRaw(context, request, cq));
    }
    ::grpc::Status SendPing(::grpc::ClientContext* context, const ::dsloadbalancer::PingMessage& request, ::dsloadbalancer::PingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsloadbalancer::PingResponse>> AsyncSendPing(::grpc::ClientContext* context, const ::dsloadbalancer::PingMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsloadbalancer::PingResponse>>(AsyncSendPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsloadbalancer::PingResponse>> PrepareAsyncSendPing(::grpc::ClientContext* context, const ::dsloadbalancer::PingMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dsloadbalancer::PingResponse>>(PrepareAsyncSendPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::dsloadbalancer::TaskInfo>> handleTask(::grpc::ClientContext* context, ::dsloadbalancer::Result* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::dsloadbalancer::TaskInfo>>(handleTaskRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::dsloadbalancer::TaskInfo>> AsynchandleTask(::grpc::ClientContext* context, ::dsloadbalancer::Result* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::dsloadbalancer::TaskInfo>>(AsynchandleTaskRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::dsloadbalancer::TaskInfo>> PrepareAsynchandleTask(::grpc::ClientContext* context, ::dsloadbalancer::Result* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::dsloadbalancer::TaskInfo>>(PrepareAsynchandleTaskRaw(context, response, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Put(::grpc::ClientContext* context, ::dsloadbalancer::BulkPutResponse* response, ::grpc::ClientWriteReactor< ::dsloadbalancer::KVPair>* reactor) override;
      void Get(::grpc::ClientContext* context, const ::dsloadbalancer::BulkGetRequest* request, ::grpc::ClientReadReactor< ::dsloadbalancer::KVPair>* reactor) override;
      void SendPing(::grpc::ClientContext* context, const ::dsloadbalancer::PingMessage* request, ::dsloadbalancer::PingResponse* response, std::function<void(::grpc::Status)>) override;
      void SendPing(::grpc::ClientContext* context, const ::dsloadbalancer::PingMessage* request, ::dsloadbalancer::PingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void handleTask(::grpc::ClientContext* context, ::dsloadbalancer::Result* response, ::grpc::ClientWriteReactor< ::dsloadbalancer::TaskInfo>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientWriter< ::dsloadbalancer::KVPair>* PutRaw(::grpc::ClientContext* context, ::dsloadbalancer::BulkPutResponse* response) override;
    ::grpc::ClientAsyncWriter< ::dsloadbalancer::KVPair>* AsyncPutRaw(::grpc::ClientContext* context, ::dsloadbalancer::BulkPutResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::dsloadbalancer::KVPair>* PrepareAsyncPutRaw(::grpc::ClientContext* context, ::dsloadbalancer::BulkPutResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::dsloadbalancer::KVPair>* GetRaw(::grpc::ClientContext* context, const ::dsloadbalancer::BulkGetRequest& request) override;
    ::grpc::ClientAsyncReader< ::dsloadbalancer::KVPair>* AsyncGetRaw(::grpc::ClientContext* context, const ::dsloadbalancer::BulkGetRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::dsloadbalancer::KVPair>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::dsloadbalancer::BulkGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsloadbalancer::PingResponse>* AsyncSendPingRaw(::grpc::ClientContext* context, const ::dsloadbalancer::PingMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dsloadbalancer::PingResponse>* PrepareAsyncSendPingRaw(::grpc::ClientContext* context, const ::dsloadbalancer::PingMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::dsloadbalancer::TaskInfo>* handleTaskRaw(::grpc::ClientContext* context, ::dsloadbalancer::Result* response) override;
    ::grpc::ClientAsyncWriter< ::dsloadbalancer::TaskInfo>* AsynchandleTaskRaw(::grpc::ClientContext* context, ::dsloadbalancer::Result* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::dsloadbalancer::TaskInfo>* PrepareAsynchandleTaskRaw(::grpc::ClientContext* context, ::dsloadbalancer::Result* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Put_;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
    const ::grpc::internal::RpcMethod rpcmethod_SendPing_;
    const ::grpc::internal::RpcMethod rpcmethod_handleTask_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Stores a series of key-value pairs
    virtual ::grpc::Status Put(::grpc::ServerContext* context, ::grpc::ServerReader< ::dsloadbalancer::KVPair>* reader, ::dsloadbalancer::BulkPutResponse* response);
    // Retrieves the values for a given list of keys
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::dsloadbalancer::BulkGetRequest* request, ::grpc::ServerWriter< ::dsloadbalancer::KVPair>* writer);
    // Sends a Ping to Nodes to see which Nodes are running
    virtual ::grpc::Status SendPing(::grpc::ServerContext* context, const ::dsloadbalancer::PingMessage* request, ::dsloadbalancer::PingResponse* response);
    virtual ::grpc::Status handleTask(::grpc::ServerContext* context, ::grpc::ServerReader< ::dsloadbalancer::TaskInfo>* reader, ::dsloadbalancer::Result* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Put() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::dsloadbalancer::KVPair>* /*reader*/, ::dsloadbalancer::BulkPutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPut(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::dsloadbalancer::BulkPutResponse, ::dsloadbalancer::KVPair>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::dsloadbalancer::BulkGetRequest* /*request*/, ::grpc::ServerWriter< ::dsloadbalancer::KVPair>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::dsloadbalancer::BulkGetRequest* request, ::grpc::ServerAsyncWriter< ::dsloadbalancer::KVPair>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendPing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendPing() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SendPing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPing(::grpc::ServerContext* /*context*/, const ::dsloadbalancer::PingMessage* /*request*/, ::dsloadbalancer::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendPing(::grpc::ServerContext* context, ::dsloadbalancer::PingMessage* request, ::grpc::ServerAsyncResponseWriter< ::dsloadbalancer::PingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_handleTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_handleTask() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_handleTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handleTask(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::dsloadbalancer::TaskInfo>* /*reader*/, ::dsloadbalancer::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthandleTask(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::dsloadbalancer::Result, ::dsloadbalancer::TaskInfo>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(3, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Put<WithAsyncMethod_Get<WithAsyncMethod_SendPing<WithAsyncMethod_handleTask<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Put() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::dsloadbalancer::KVPair, ::dsloadbalancer::BulkPutResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, ::dsloadbalancer::BulkPutResponse* response) { return this->Put(context, response); }));
    }
    ~WithCallbackMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::dsloadbalancer::KVPair>* /*reader*/, ::dsloadbalancer::BulkPutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::dsloadbalancer::KVPair>* Put(
      ::grpc::CallbackServerContext* /*context*/, ::dsloadbalancer::BulkPutResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Get() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::dsloadbalancer::BulkGetRequest, ::dsloadbalancer::KVPair>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dsloadbalancer::BulkGetRequest* request) { return this->Get(context, request); }));
    }
    ~WithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::dsloadbalancer::BulkGetRequest* /*request*/, ::grpc::ServerWriter< ::dsloadbalancer::KVPair>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::dsloadbalancer::KVPair>* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::dsloadbalancer::BulkGetRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendPing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendPing() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::dsloadbalancer::PingMessage, ::dsloadbalancer::PingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::dsloadbalancer::PingMessage* request, ::dsloadbalancer::PingResponse* response) { return this->SendPing(context, request, response); }));}
    void SetMessageAllocatorFor_SendPing(
        ::grpc::MessageAllocator< ::dsloadbalancer::PingMessage, ::dsloadbalancer::PingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dsloadbalancer::PingMessage, ::dsloadbalancer::PingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendPing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPing(::grpc::ServerContext* /*context*/, const ::dsloadbalancer::PingMessage* /*request*/, ::dsloadbalancer::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendPing(
      ::grpc::CallbackServerContext* /*context*/, const ::dsloadbalancer::PingMessage* /*request*/, ::dsloadbalancer::PingResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_handleTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_handleTask() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackClientStreamingHandler< ::dsloadbalancer::TaskInfo, ::dsloadbalancer::Result>(
            [this](
                   ::grpc::CallbackServerContext* context, ::dsloadbalancer::Result* response) { return this->handleTask(context, response); }));
    }
    ~WithCallbackMethod_handleTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handleTask(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::dsloadbalancer::TaskInfo>* /*reader*/, ::dsloadbalancer::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::dsloadbalancer::TaskInfo>* handleTask(
      ::grpc::CallbackServerContext* /*context*/, ::dsloadbalancer::Result* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Put<WithCallbackMethod_Get<WithCallbackMethod_SendPing<WithCallbackMethod_handleTask<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Put() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::dsloadbalancer::KVPair>* /*reader*/, ::dsloadbalancer::BulkPutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::dsloadbalancer::BulkGetRequest* /*request*/, ::grpc::ServerWriter< ::dsloadbalancer::KVPair>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendPing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendPing() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SendPing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPing(::grpc::ServerContext* /*context*/, const ::dsloadbalancer::PingMessage* /*request*/, ::dsloadbalancer::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_handleTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_handleTask() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_handleTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handleTask(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::dsloadbalancer::TaskInfo>* /*reader*/, ::dsloadbalancer::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Put() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::dsloadbalancer::KVPair>* /*reader*/, ::dsloadbalancer::BulkPutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPut(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::dsloadbalancer::BulkGetRequest* /*request*/, ::grpc::ServerWriter< ::dsloadbalancer::KVPair>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendPing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendPing() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SendPing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPing(::grpc::ServerContext* /*context*/, const ::dsloadbalancer::PingMessage* /*request*/, ::dsloadbalancer::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendPing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_handleTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_handleTask() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_handleTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handleTask(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::dsloadbalancer::TaskInfo>* /*reader*/, ::dsloadbalancer::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthandleTask(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(3, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Put() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->Put(context, response); }));
    }
    ~WithRawCallbackMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::dsloadbalancer::KVPair>* /*reader*/, ::dsloadbalancer::BulkPutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* Put(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Get() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Get(context, request); }));
    }
    ~WithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::dsloadbalancer::BulkGetRequest* /*request*/, ::grpc::ServerWriter< ::dsloadbalancer::KVPair>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendPing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendPing() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendPing(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendPing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPing(::grpc::ServerContext* /*context*/, const ::dsloadbalancer::PingMessage* /*request*/, ::dsloadbalancer::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendPing(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_handleTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_handleTask() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->handleTask(context, response); }));
    }
    ~WithRawCallbackMethod_handleTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handleTask(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::dsloadbalancer::TaskInfo>* /*reader*/, ::dsloadbalancer::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* handleTask(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendPing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendPing() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dsloadbalancer::PingMessage, ::dsloadbalancer::PingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::dsloadbalancer::PingMessage, ::dsloadbalancer::PingResponse>* streamer) {
                       return this->StreamedSendPing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendPing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendPing(::grpc::ServerContext* /*context*/, const ::dsloadbalancer::PingMessage* /*request*/, ::dsloadbalancer::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendPing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dsloadbalancer::PingMessage,::dsloadbalancer::PingResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendPing<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::dsloadbalancer::BulkGetRequest, ::dsloadbalancer::KVPair>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::dsloadbalancer::BulkGetRequest, ::dsloadbalancer::KVPair>* streamer) {
                       return this->StreamedGet(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::dsloadbalancer::BulkGetRequest* /*request*/, ::grpc::ServerWriter< ::dsloadbalancer::KVPair>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::dsloadbalancer::BulkGetRequest,::dsloadbalancer::KVPair>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Get<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_Get<WithStreamedUnaryMethod_SendPing<Service > > StreamedService;
};

}  // namespace dsloadbalancer


#endif  // GRPC_dsloadbalancer_2eproto__INCLUDED
