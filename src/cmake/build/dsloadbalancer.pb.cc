// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dsloadbalancer.proto

#include "dsloadbalancer.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace dsloadbalancer {
template <typename>
PROTOBUF_CONSTEXPR KVPair::KVPair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/ 0

  , /*decltype(_impl_.value_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KVPairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KVPairDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~KVPairDefaultTypeInternal() {}
  union {
    KVPair _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KVPairDefaultTypeInternal _KVPair_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BulkPutResponse::BulkPutResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BulkPutResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BulkPutResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BulkPutResponseDefaultTypeInternal() {}
  union {
    BulkPutResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BulkPutResponseDefaultTypeInternal _BulkPutResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BulkGetRequest::BulkGetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keys_)*/ {}
  ,/* _impl_._keys_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BulkGetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BulkGetRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BulkGetRequestDefaultTypeInternal() {}
  union {
    BulkGetRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BulkGetRequestDefaultTypeInternal _BulkGetRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PingMessage::PingMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ip_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.port_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PingMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PingMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PingMessageDefaultTypeInternal() {}
  union {
    PingMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PingMessageDefaultTypeInternal _PingMessage_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PingResponse::PingResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ip_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.port_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.isalive_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PingResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PingResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PingResponseDefaultTypeInternal() {}
  union {
    PingResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PingResponseDefaultTypeInternal _PingResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TaskInfo::TaskInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.workernodeip_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.workernodeport_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.storagenodeip_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.storagenodeport_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.datasize_)*/ 0

  , /*decltype(_impl_.minkey_)*/ 0

  , /*decltype(_impl_.maxkey_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskInfoDefaultTypeInternal() {}
  union {
    TaskInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskInfoDefaultTypeInternal _TaskInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Result::Result(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hashmap_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResultDefaultTypeInternal() {}
  union {
    Result _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResultDefaultTypeInternal _Result_default_instance_;
}  // namespace dsloadbalancer
static ::_pb::Metadata file_level_metadata_dsloadbalancer_2eproto[7];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_dsloadbalancer_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dsloadbalancer_2eproto = nullptr;
const ::uint32_t TableStruct_dsloadbalancer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dsloadbalancer::KVPair, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dsloadbalancer::KVPair, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::dsloadbalancer::KVPair, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dsloadbalancer::BulkPutResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dsloadbalancer::BulkPutResponse, _impl_.success_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dsloadbalancer::BulkGetRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dsloadbalancer::BulkGetRequest, _impl_.keys_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dsloadbalancer::PingMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dsloadbalancer::PingMessage, _impl_.ip_),
    PROTOBUF_FIELD_OFFSET(::dsloadbalancer::PingMessage, _impl_.port_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dsloadbalancer::PingResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dsloadbalancer::PingResponse, _impl_.isalive_),
    PROTOBUF_FIELD_OFFSET(::dsloadbalancer::PingResponse, _impl_.ip_),
    PROTOBUF_FIELD_OFFSET(::dsloadbalancer::PingResponse, _impl_.port_),
    PROTOBUF_FIELD_OFFSET(::dsloadbalancer::PingResponse, _impl_.type_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dsloadbalancer::TaskInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dsloadbalancer::TaskInfo, _impl_.datasize_),
    PROTOBUF_FIELD_OFFSET(::dsloadbalancer::TaskInfo, _impl_.minkey_),
    PROTOBUF_FIELD_OFFSET(::dsloadbalancer::TaskInfo, _impl_.maxkey_),
    PROTOBUF_FIELD_OFFSET(::dsloadbalancer::TaskInfo, _impl_.workernodeip_),
    PROTOBUF_FIELD_OFFSET(::dsloadbalancer::TaskInfo, _impl_.workernodeport_),
    PROTOBUF_FIELD_OFFSET(::dsloadbalancer::TaskInfo, _impl_.storagenodeip_),
    PROTOBUF_FIELD_OFFSET(::dsloadbalancer::TaskInfo, _impl_.storagenodeport_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dsloadbalancer::Result, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dsloadbalancer::Result, _impl_.hashmap_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::dsloadbalancer::KVPair)},
        { 10, -1, -1, sizeof(::dsloadbalancer::BulkPutResponse)},
        { 19, -1, -1, sizeof(::dsloadbalancer::BulkGetRequest)},
        { 28, -1, -1, sizeof(::dsloadbalancer::PingMessage)},
        { 38, -1, -1, sizeof(::dsloadbalancer::PingResponse)},
        { 50, -1, -1, sizeof(::dsloadbalancer::TaskInfo)},
        { 65, -1, -1, sizeof(::dsloadbalancer::Result)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dsloadbalancer::_KVPair_default_instance_._instance,
    &::dsloadbalancer::_BulkPutResponse_default_instance_._instance,
    &::dsloadbalancer::_BulkGetRequest_default_instance_._instance,
    &::dsloadbalancer::_PingMessage_default_instance_._instance,
    &::dsloadbalancer::_PingResponse_default_instance_._instance,
    &::dsloadbalancer::_TaskInfo_default_instance_._instance,
    &::dsloadbalancer::_Result_default_instance_._instance,
};
const char descriptor_table_protodef_dsloadbalancer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\024dsloadbalancer.proto\022\016dsloadbalancer\"$"
    "\n\006KVPair\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005\"\"\n\017"
    "BulkPutResponse\022\017\n\007success\030\001 \001(\010\"\036\n\016Bulk"
    "GetRequest\022\014\n\004keys\030\001 \003(\005\"\'\n\013PingMessage\022"
    "\n\n\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\t\"G\n\014PingRespons"
    "e\022\017\n\007isAlive\030\001 \001(\010\022\n\n\002ip\030\002 \001(\t\022\014\n\004port\030\003"
    " \001(\t\022\014\n\004type\030\004 \001(\t\"\232\001\n\010TaskInfo\022\020\n\010dataS"
    "ize\030\001 \001(\005\022\016\n\006minKey\030\002 \001(\005\022\016\n\006maxKey\030\003 \001("
    "\005\022\024\n\014workerNodeIp\030\004 \001(\t\022\026\n\016workerNodePor"
    "t\030\005 \001(\t\022\025\n\rstorageNodeIp\030\006 \001(\t\022\027\n\017storag"
    "eNodePort\030\007 \001(\t\"1\n\006Result\022\'\n\007hashMap\030\001 \003"
    "(\0132\026.dsloadbalancer.KVPair2\243\002\n\rSystemSer"
    "vice\022B\n\003Put\022\026.dsloadbalancer.KVPair\032\037.ds"
    "loadbalancer.BulkPutResponse\"\000(\001\022A\n\003Get\022"
    "\036.dsloadbalancer.BulkGetRequest\032\026.dsload"
    "balancer.KVPair\"\0000\001\022G\n\010SendPing\022\033.dsload"
    "balancer.PingMessage\032\034.dsloadbalancer.Pi"
    "ngResponse\"\000\022B\n\nhandleTask\022\030.dsloadbalan"
    "cer.TaskInfo\032\026.dsloadbalancer.Result\"\000(\001"
    "b\006proto3"
};
static ::absl::once_flag descriptor_table_dsloadbalancer_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dsloadbalancer_2eproto = {
    false,
    false,
    768,
    descriptor_table_protodef_dsloadbalancer_2eproto,
    "dsloadbalancer.proto",
    &descriptor_table_dsloadbalancer_2eproto_once,
    nullptr,
    0,
    7,
    schemas,
    file_default_instances,
    TableStruct_dsloadbalancer_2eproto::offsets,
    file_level_metadata_dsloadbalancer_2eproto,
    file_level_enum_descriptors_dsloadbalancer_2eproto,
    file_level_service_descriptors_dsloadbalancer_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dsloadbalancer_2eproto_getter() {
  return &descriptor_table_dsloadbalancer_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dsloadbalancer_2eproto(&descriptor_table_dsloadbalancer_2eproto);
namespace dsloadbalancer {
// ===================================================================

class KVPair::_Internal {
 public:
};

KVPair::KVPair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dsloadbalancer.KVPair)
}
KVPair::KVPair(const KVPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dsloadbalancer.KVPair)
}

inline void KVPair::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.key_) { 0 }

    , decltype(_impl_.value_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

KVPair::~KVPair() {
  // @@protoc_insertion_point(destructor:dsloadbalancer.KVPair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KVPair::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void KVPair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KVPair::Clear() {
// @@protoc_insertion_point(message_clear_start:dsloadbalancer.KVPair)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.key_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.key_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KVPair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* KVPair::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsloadbalancer.KVPair)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->_internal_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_key(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsloadbalancer.KVPair)
  return target;
}

::size_t KVPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dsloadbalancer.KVPair)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->_internal_key() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_key());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KVPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KVPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KVPair::GetClassData() const { return &_class_data_; }


void KVPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KVPair*>(&to_msg);
  auto& from = static_cast<const KVPair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dsloadbalancer.KVPair)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_key() != 0) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KVPair::CopyFrom(const KVPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsloadbalancer.KVPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVPair::IsInitialized() const {
  return true;
}

void KVPair::InternalSwap(KVPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KVPair, _impl_.value_)
      + sizeof(KVPair::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(KVPair, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KVPair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dsloadbalancer_2eproto_getter, &descriptor_table_dsloadbalancer_2eproto_once,
      file_level_metadata_dsloadbalancer_2eproto[0]);
}
// ===================================================================

class BulkPutResponse::_Internal {
 public:
};

BulkPutResponse::BulkPutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dsloadbalancer.BulkPutResponse)
}
BulkPutResponse::BulkPutResponse(const BulkPutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dsloadbalancer.BulkPutResponse)
}

inline void BulkPutResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.success_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BulkPutResponse::~BulkPutResponse() {
  // @@protoc_insertion_point(destructor:dsloadbalancer.BulkPutResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BulkPutResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void BulkPutResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BulkPutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dsloadbalancer.BulkPutResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkPutResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BulkPutResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsloadbalancer.BulkPutResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsloadbalancer.BulkPutResponse)
  return target;
}

::size_t BulkPutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dsloadbalancer.BulkPutResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BulkPutResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BulkPutResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BulkPutResponse::GetClassData() const { return &_class_data_; }


void BulkPutResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BulkPutResponse*>(&to_msg);
  auto& from = static_cast<const BulkPutResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dsloadbalancer.BulkPutResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BulkPutResponse::CopyFrom(const BulkPutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsloadbalancer.BulkPutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkPutResponse::IsInitialized() const {
  return true;
}

void BulkPutResponse::InternalSwap(BulkPutResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkPutResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dsloadbalancer_2eproto_getter, &descriptor_table_dsloadbalancer_2eproto_once,
      file_level_metadata_dsloadbalancer_2eproto[1]);
}
// ===================================================================

class BulkGetRequest::_Internal {
 public:
};

BulkGetRequest::BulkGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dsloadbalancer.BulkGetRequest)
}
BulkGetRequest::BulkGetRequest(const BulkGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BulkGetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_) { from._impl_.keys_ }
    ,/* _impl_._keys_cached_byte_size_ = */ { 0 }

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dsloadbalancer.BulkGetRequest)
}

inline void BulkGetRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_) { arena }
    ,/* _impl_._keys_cached_byte_size_ = */ { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BulkGetRequest::~BulkGetRequest() {
  // @@protoc_insertion_point(destructor:dsloadbalancer.BulkGetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BulkGetRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedField();
}

void BulkGetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BulkGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dsloadbalancer.BulkGetRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_keys()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkGetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_keys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 8) {
          _internal_add_keys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BulkGetRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsloadbalancer.BulkGetRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 keys = 1;
  {
    int byte_size = _impl_._keys_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(1, _internal_keys(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsloadbalancer.BulkGetRequest)
  return target;
}

::size_t BulkGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dsloadbalancer.BulkGetRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 keys = 1;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_keys())
    ;
    _impl_._keys_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BulkGetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BulkGetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BulkGetRequest::GetClassData() const { return &_class_data_; }


void BulkGetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BulkGetRequest*>(&to_msg);
  auto& from = static_cast<const BulkGetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dsloadbalancer.BulkGetRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BulkGetRequest::CopyFrom(const BulkGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsloadbalancer.BulkGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkGetRequest::IsInitialized() const {
  return true;
}

void BulkGetRequest::InternalSwap(BulkGetRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkGetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dsloadbalancer_2eproto_getter, &descriptor_table_dsloadbalancer_2eproto_once,
      file_level_metadata_dsloadbalancer_2eproto[2]);
}
// ===================================================================

class PingMessage::_Internal {
 public:
};

PingMessage::PingMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dsloadbalancer.PingMessage)
}
PingMessage::PingMessage(const PingMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PingMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_) {}

    , decltype(_impl_.port_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), _this->GetArenaForAllocation());
  }
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port().empty()) {
    _this->_impl_.port_.Set(from._internal_port(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dsloadbalancer.PingMessage)
}

inline void PingMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_) {}

    , decltype(_impl_.port_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PingMessage::~PingMessage() {
  // @@protoc_insertion_point(destructor:dsloadbalancer.PingMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PingMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_.Destroy();
  _impl_.port_.Destroy();
}

void PingMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PingMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:dsloadbalancer.PingMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_.ClearToEmpty();
  _impl_.port_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PingMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dsloadbalancer.PingMessage.ip"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_port();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dsloadbalancer.PingMessage.port"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PingMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsloadbalancer.PingMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    const std::string& _s = this->_internal_ip();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dsloadbalancer.PingMessage.ip");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string port = 2;
  if (!this->_internal_port().empty()) {
    const std::string& _s = this->_internal_port();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dsloadbalancer.PingMessage.port");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsloadbalancer.PingMessage)
  return target;
}

::size_t PingMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dsloadbalancer.PingMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ip());
  }

  // string port = 2;
  if (!this->_internal_port().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PingMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PingMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PingMessage::GetClassData() const { return &_class_data_; }


void PingMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PingMessage*>(&to_msg);
  auto& from = static_cast<const PingMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dsloadbalancer.PingMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (!from._internal_port().empty()) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PingMessage::CopyFrom(const PingMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsloadbalancer.PingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingMessage::IsInitialized() const {
  return true;
}

void PingMessage::InternalSwap(PingMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_, lhs_arena,
                                       &other->_impl_.ip_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_, lhs_arena,
                                       &other->_impl_.port_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata PingMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dsloadbalancer_2eproto_getter, &descriptor_table_dsloadbalancer_2eproto_once,
      file_level_metadata_dsloadbalancer_2eproto[3]);
}
// ===================================================================

class PingResponse::_Internal {
 public:
};

PingResponse::PingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dsloadbalancer.PingResponse)
}
PingResponse::PingResponse(const PingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PingResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_) {}

    , decltype(_impl_.port_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.isalive_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), _this->GetArenaForAllocation());
  }
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port().empty()) {
    _this->_impl_.port_.Set(from._internal_port(), _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), _this->GetArenaForAllocation());
  }
  _this->_impl_.isalive_ = from._impl_.isalive_;
  // @@protoc_insertion_point(copy_constructor:dsloadbalancer.PingResponse)
}

inline void PingResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_) {}

    , decltype(_impl_.port_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.isalive_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PingResponse::~PingResponse() {
  // @@protoc_insertion_point(destructor:dsloadbalancer.PingResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PingResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_.Destroy();
  _impl_.port_.Destroy();
  _impl_.type_.Destroy();
}

void PingResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dsloadbalancer.PingResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_.ClearToEmpty();
  _impl_.port_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _impl_.isalive_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PingResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isAlive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.isalive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dsloadbalancer.PingResponse.ip"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_port();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dsloadbalancer.PingResponse.port"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dsloadbalancer.PingResponse.type"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PingResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsloadbalancer.PingResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isAlive = 1;
  if (this->_internal_isalive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_isalive(), target);
  }

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    const std::string& _s = this->_internal_ip();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dsloadbalancer.PingResponse.ip");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string port = 3;
  if (!this->_internal_port().empty()) {
    const std::string& _s = this->_internal_port();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dsloadbalancer.PingResponse.port");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string type = 4;
  if (!this->_internal_type().empty()) {
    const std::string& _s = this->_internal_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dsloadbalancer.PingResponse.type");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsloadbalancer.PingResponse)
  return target;
}

::size_t PingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dsloadbalancer.PingResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ip());
  }

  // string port = 3;
  if (!this->_internal_port().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port());
  }

  // string type = 4;
  if (!this->_internal_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_type());
  }

  // bool isAlive = 1;
  if (this->_internal_isalive() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PingResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PingResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PingResponse::GetClassData() const { return &_class_data_; }


void PingResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PingResponse*>(&to_msg);
  auto& from = static_cast<const PingResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dsloadbalancer.PingResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (!from._internal_port().empty()) {
    _this->_internal_set_port(from._internal_port());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_isalive() != 0) {
    _this->_internal_set_isalive(from._internal_isalive());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PingResponse::CopyFrom(const PingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsloadbalancer.PingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingResponse::IsInitialized() const {
  return true;
}

void PingResponse::InternalSwap(PingResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_, lhs_arena,
                                       &other->_impl_.ip_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_, lhs_arena,
                                       &other->_impl_.port_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, lhs_arena,
                                       &other->_impl_.type_, rhs_arena);

  swap(_impl_.isalive_, other->_impl_.isalive_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PingResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dsloadbalancer_2eproto_getter, &descriptor_table_dsloadbalancer_2eproto_once,
      file_level_metadata_dsloadbalancer_2eproto[4]);
}
// ===================================================================

class TaskInfo::_Internal {
 public:
};

TaskInfo::TaskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dsloadbalancer.TaskInfo)
}
TaskInfo::TaskInfo(const TaskInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.workernodeip_) {}

    , decltype(_impl_.workernodeport_) {}

    , decltype(_impl_.storagenodeip_) {}

    , decltype(_impl_.storagenodeport_) {}

    , decltype(_impl_.datasize_) {}

    , decltype(_impl_.minkey_) {}

    , decltype(_impl_.maxkey_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.workernodeip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.workernodeip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workernodeip().empty()) {
    _this->_impl_.workernodeip_.Set(from._internal_workernodeip(), _this->GetArenaForAllocation());
  }
  _impl_.workernodeport_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.workernodeport_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workernodeport().empty()) {
    _this->_impl_.workernodeport_.Set(from._internal_workernodeport(), _this->GetArenaForAllocation());
  }
  _impl_.storagenodeip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.storagenodeip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_storagenodeip().empty()) {
    _this->_impl_.storagenodeip_.Set(from._internal_storagenodeip(), _this->GetArenaForAllocation());
  }
  _impl_.storagenodeport_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.storagenodeport_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_storagenodeport().empty()) {
    _this->_impl_.storagenodeport_.Set(from._internal_storagenodeport(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.datasize_, &from._impl_.datasize_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.maxkey_) -
    reinterpret_cast<char*>(&_impl_.datasize_)) + sizeof(_impl_.maxkey_));
  // @@protoc_insertion_point(copy_constructor:dsloadbalancer.TaskInfo)
}

inline void TaskInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.workernodeip_) {}

    , decltype(_impl_.workernodeport_) {}

    , decltype(_impl_.storagenodeip_) {}

    , decltype(_impl_.storagenodeport_) {}

    , decltype(_impl_.datasize_) { 0 }

    , decltype(_impl_.minkey_) { 0 }

    , decltype(_impl_.maxkey_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.workernodeip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.workernodeip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.workernodeport_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.workernodeport_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.storagenodeip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.storagenodeip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.storagenodeport_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.storagenodeport_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TaskInfo::~TaskInfo() {
  // @@protoc_insertion_point(destructor:dsloadbalancer.TaskInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.workernodeip_.Destroy();
  _impl_.workernodeport_.Destroy();
  _impl_.storagenodeip_.Destroy();
  _impl_.storagenodeport_.Destroy();
}

void TaskInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dsloadbalancer.TaskInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.workernodeip_.ClearToEmpty();
  _impl_.workernodeport_.ClearToEmpty();
  _impl_.storagenodeip_.ClearToEmpty();
  _impl_.storagenodeport_.ClearToEmpty();
  ::memset(&_impl_.datasize_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.maxkey_) -
      reinterpret_cast<char*>(&_impl_.datasize_)) + sizeof(_impl_.maxkey_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 dataSize = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.datasize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 minKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.minkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 maxKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.maxkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string workerNodeIp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_workernodeip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dsloadbalancer.TaskInfo.workerNodeIp"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string workerNodePort = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_workernodeport();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dsloadbalancer.TaskInfo.workerNodePort"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string storageNodeIp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_storagenodeip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dsloadbalancer.TaskInfo.storageNodeIp"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string storageNodePort = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_storagenodeport();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dsloadbalancer.TaskInfo.storageNodePort"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TaskInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsloadbalancer.TaskInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dataSize = 1;
  if (this->_internal_datasize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_datasize(), target);
  }

  // int32 minKey = 2;
  if (this->_internal_minkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_minkey(), target);
  }

  // int32 maxKey = 3;
  if (this->_internal_maxkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_maxkey(), target);
  }

  // string workerNodeIp = 4;
  if (!this->_internal_workernodeip().empty()) {
    const std::string& _s = this->_internal_workernodeip();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dsloadbalancer.TaskInfo.workerNodeIp");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string workerNodePort = 5;
  if (!this->_internal_workernodeport().empty()) {
    const std::string& _s = this->_internal_workernodeport();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dsloadbalancer.TaskInfo.workerNodePort");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string storageNodeIp = 6;
  if (!this->_internal_storagenodeip().empty()) {
    const std::string& _s = this->_internal_storagenodeip();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dsloadbalancer.TaskInfo.storageNodeIp");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string storageNodePort = 7;
  if (!this->_internal_storagenodeport().empty()) {
    const std::string& _s = this->_internal_storagenodeport();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dsloadbalancer.TaskInfo.storageNodePort");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsloadbalancer.TaskInfo)
  return target;
}

::size_t TaskInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dsloadbalancer.TaskInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string workerNodeIp = 4;
  if (!this->_internal_workernodeip().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_workernodeip());
  }

  // string workerNodePort = 5;
  if (!this->_internal_workernodeport().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_workernodeport());
  }

  // string storageNodeIp = 6;
  if (!this->_internal_storagenodeip().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_storagenodeip());
  }

  // string storageNodePort = 7;
  if (!this->_internal_storagenodeport().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_storagenodeport());
  }

  // int32 dataSize = 1;
  if (this->_internal_datasize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_datasize());
  }

  // int32 minKey = 2;
  if (this->_internal_minkey() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_minkey());
  }

  // int32 maxKey = 3;
  if (this->_internal_maxkey() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_maxkey());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskInfo::GetClassData() const { return &_class_data_; }


void TaskInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskInfo*>(&to_msg);
  auto& from = static_cast<const TaskInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dsloadbalancer.TaskInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_workernodeip().empty()) {
    _this->_internal_set_workernodeip(from._internal_workernodeip());
  }
  if (!from._internal_workernodeport().empty()) {
    _this->_internal_set_workernodeport(from._internal_workernodeport());
  }
  if (!from._internal_storagenodeip().empty()) {
    _this->_internal_set_storagenodeip(from._internal_storagenodeip());
  }
  if (!from._internal_storagenodeport().empty()) {
    _this->_internal_set_storagenodeport(from._internal_storagenodeport());
  }
  if (from._internal_datasize() != 0) {
    _this->_internal_set_datasize(from._internal_datasize());
  }
  if (from._internal_minkey() != 0) {
    _this->_internal_set_minkey(from._internal_minkey());
  }
  if (from._internal_maxkey() != 0) {
    _this->_internal_set_maxkey(from._internal_maxkey());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskInfo::CopyFrom(const TaskInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsloadbalancer.TaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInfo::IsInitialized() const {
  return true;
}

void TaskInfo::InternalSwap(TaskInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.workernodeip_, lhs_arena,
                                       &other->_impl_.workernodeip_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.workernodeport_, lhs_arena,
                                       &other->_impl_.workernodeport_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.storagenodeip_, lhs_arena,
                                       &other->_impl_.storagenodeip_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.storagenodeport_, lhs_arena,
                                       &other->_impl_.storagenodeport_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskInfo, _impl_.maxkey_)
      + sizeof(TaskInfo::_impl_.maxkey_)
      - PROTOBUF_FIELD_OFFSET(TaskInfo, _impl_.datasize_)>(
          reinterpret_cast<char*>(&_impl_.datasize_),
          reinterpret_cast<char*>(&other->_impl_.datasize_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dsloadbalancer_2eproto_getter, &descriptor_table_dsloadbalancer_2eproto_once,
      file_level_metadata_dsloadbalancer_2eproto[5]);
}
// ===================================================================

class Result::_Internal {
 public:
};

Result::Result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dsloadbalancer.Result)
}
Result::Result(const Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Result* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hashmap_){from._impl_.hashmap_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dsloadbalancer.Result)
}

inline void Result::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.hashmap_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:dsloadbalancer.Result)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Result::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_hashmap()->~RepeatedPtrField();
}

void Result::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:dsloadbalancer.Result)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_hashmap()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Result::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dsloadbalancer.KVPair hashMap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hashmap(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Result::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsloadbalancer.Result)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dsloadbalancer.KVPair hashMap = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hashmap_size()); i < n; i++) {
    const auto& repfield = this->_internal_hashmap(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsloadbalancer.Result)
  return target;
}

::size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dsloadbalancer.Result)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dsloadbalancer.KVPair hashMap = 1;
  total_size += 1UL * this->_internal_hashmap_size();
  for (const auto& msg : this->_internal_hashmap()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Result::GetClassData() const { return &_class_data_; }


void Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Result*>(&to_msg);
  auto& from = static_cast<const Result&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dsloadbalancer.Result)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_hashmap()->MergeFrom(from._internal_hashmap());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsloadbalancer.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  return true;
}

void Result::InternalSwap(Result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_hashmap()->InternalSwap(other->_internal_mutable_hashmap());
}

::PROTOBUF_NAMESPACE_ID::Metadata Result::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dsloadbalancer_2eproto_getter, &descriptor_table_dsloadbalancer_2eproto_once,
      file_level_metadata_dsloadbalancer_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace dsloadbalancer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dsloadbalancer::KVPair*
Arena::CreateMaybeMessage< ::dsloadbalancer::KVPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dsloadbalancer::KVPair >(arena);
}
template<> PROTOBUF_NOINLINE ::dsloadbalancer::BulkPutResponse*
Arena::CreateMaybeMessage< ::dsloadbalancer::BulkPutResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dsloadbalancer::BulkPutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dsloadbalancer::BulkGetRequest*
Arena::CreateMaybeMessage< ::dsloadbalancer::BulkGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dsloadbalancer::BulkGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dsloadbalancer::PingMessage*
Arena::CreateMaybeMessage< ::dsloadbalancer::PingMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dsloadbalancer::PingMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::dsloadbalancer::PingResponse*
Arena::CreateMaybeMessage< ::dsloadbalancer::PingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dsloadbalancer::PingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dsloadbalancer::TaskInfo*
Arena::CreateMaybeMessage< ::dsloadbalancer::TaskInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dsloadbalancer::TaskInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::dsloadbalancer::Result*
Arena::CreateMaybeMessage< ::dsloadbalancer::Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dsloadbalancer::Result >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
